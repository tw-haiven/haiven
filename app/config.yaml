application_name: ${TEAMAI_APPLICATION_NAME}

embeddings_db:
  type: ${EMBEDDINGS_DB_TYPE}
  skip_import: ${SKIP_EMBEDDINGS_IMPORT}
  config:
    url: ${QDRANT_URL}
    api_key: ${QDRANT_API_KEY}
    collection_name: ${QDRANT_COLLECTION}

knowledge_pack_path: ${KNOWLEDGE_PACK_PATH}

enabled_providers: ${ENABLED_PROVIDERS}

default_models:
  chat: ${ENABLED_CHAT_MODEL}
  vision: ${ENABLED_VISION_MODEL}
  embeddings: ${ENABLED_EMBEDDINGS_MODEL}

models:
  - id: azure-gpt35
    name: GPT-3.5 on Azure
    provider: Azure
    features:
      - text-generation
      - stop-sequence
    config:
      azure_endpoint: ${AZURE_OPENAI_API_BASE}
      api_version: ${AZURE_OPENAI_API_VERSION}
      azure_deployment: ${AZURE_OPENAI_DEPLOYMENT_NAME_GPT35}
      api_key: ${AZURE_OPENAI_API_KEY}

  - id: azure-gpt-4o
    name: GPT-4o on Azure
    provider: Azure
    features:
      - image-to-text
      - text-generation
      - stop-sequence
    config:
      azure_endpoint: ${AZURE_OPENAI_API_BASE}
      api_version: ${AZURE_OPENAI_API_VERSION}
      azure_deployment: ${AZURE_OPENAI_DEPLOYMENT_NAME_GPT4o}
      api_key: ${AZURE_OPENAI_API_KEY}
  - id: azure-gpt-4.1
    name: GPT-4.1 on Azure
    provider: Azure
    features:
      - image-to-text
      - text-generation
      - stop-sequence
    config:
      azure_endpoint: ${AZURE_OPENAI_API_BASE}
      api_version: ${AZURE_OPENAI_API_VERSION_GPT4.1}
      azure_deployment: ${AZURE_OPENAI_DEPLOYMENT_NAME_GPT4.1}
      api_key: ${AZURE_OPENAI_API_KEY}

  - id: google-gemini
    name: Gemini on Google
    provider: GCP
    features:
      - text-generation
      - image-to-text
    config:
      model: gemini-1.5-flash

  - id: aws-claude-v2
    name: Claude v2 on AWS
    provider: AWS
    features:
      - text-generation
      - stop-sequence
    config:
      model_id: anthropic.claude-v2
      aws_region_name: ${AWS_BEDROCK_REGION}
      aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      aws_access_key_id: ${AWS_ACCESS_KEY_ID}

  - id: aws-claude-v3
    name: Claude v3 on AWS
    provider: AWS
    features:
      - text-generation
      - stop-sequence
      - image-to-text
    config:
      model_id: anthropic.claude-3-sonnet-20240229-v1:0
      anthropic_version: bedrock-2023-05-31
      aws_region_name: ${AWS_BEDROCK_REGION}
      aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      aws_access_key_id: ${AWS_ACCESS_KEY_ID}

  - id: aws-claude-sonnet-3.7
    name: Claude-Sonnet-3.7 on AWS
    provider: AWS
    features:
      - text-generation
      - stop-sequence
      - image-to-text
    config:
      model_id: ${AWS_BEDROCK_REGION}.anthropic.claude-3-7-sonnet-20250219-v1:0
      aws_region_name: ${AWS_BEDROCK_REGION}
      aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      aws_access_key_id: ${AWS_ACCESS_KEY_ID}

  - id: anthropic-claude-3.7
    name: Claude-Sonnet-3.7 on Anthropic
    provider: Anthropic
    features:
      - text-generation
      - stop-sequence
      - image-to-text
    config:
      model_id: claude-3-7-sonnet-latest
      api_key: ${ANTHROPIC_API_KEY}

  - id: openai-gpt35
    name: GPT-3.5 on OpenAI
    provider: OPENAI
    features:
      - text-generation
      - stop-sequence
    config:
      model_name: gpt-3.5-turbo-16k
      api_key: ${OPENAI_API_KEY}

  - id: openai-gpt-4o
    name: GPT-4o on OpenAI
    provider: OPENAI
    features:
      - text-generation
      - stop-sequence
      - image-to-text
    config:
      model_name: gpt-4o
      api_key: ${OPENAI_API_KEY}

  - id: ollama-local-llama2
    name: Local - Ollama llama2
    provider: ollama
    features:
      - text-generation
    config:
      base_url: ${OLLAMA_HOST}
      model: llama2

  - id: ollama-local-llama3
    name: Local - Ollama llama3
    provider: ollama
    features:
      - text-generation
    config:
      base_url: ${OLLAMA_HOST}
      model: llama3:8b

  - id: ollama-local-mistral
    name: Local - Ollama Mistral
    provider: ollama
    features:
      - text-generation
    config:
      base_url: ${OLLAMA_HOST}
      model: mistral

  - id: ollama-local-llava
    name: Local - Ollama Llava
    provider: ollama
    features:
      - image-to-text
    config:
      base_url: ${OLLAMA_HOST}
      model: llava:7b

  - id: cohere-command
    name: Command on Cohere
    provider: Cohere
    features:
      - text-generation
    config:
      model: command
      api_key: ${COHERE_API_KEY}

  - id: cohere-embed-english
    name: Embed English on Cohere
    provider: Cohere
    features:
      - embeddings
    config:
      model: embed-english-v3.0
      api_key: ${COHERE_API_KEY}

  - id: xai-grok-2
    name: Grok-2 on xAI
    provider: XAI
    features:
      - text-generation
      - image-to-text
      - stop-sequence
    config:
      model: grok-2-latest
      api_key: ${XAI_API_KEY}

  - id: perplexity-sonar-pro
    name: Sonar Pro on Perplexity
    provider: Perplexity
    features:
      - text-generation
      - stop-sequence
    config:
      model: sonar-pro
      api_key: ${PERPLEXITY_API_KEY}

embeddings:
  - id: text-embedding-ada-002
    name: Text Embedding Ada 002 on Azure
    provider: azure
    config:
      azure_endpoint: ${AZURE_OPENAI_API_BASE}
      api_version: ${AZURE_OPENAI_API_VERSION_EMBEDDINGS}
      azure_deployment: ${AZURE_OPENAI_DEPLOYMENT_NAME_EMBEDDINGS}
      api_key: ${AZURE_OPENAI_API_KEY}

  - id: open-ai-text-embedding-ada-002
    name: Text Embedding Ada v2 on OpenAI
    provider: OpenAI
    config:
      model: text-embedding-ada-002
      api_key: ${OPENAI_API_KEY}

  - id: amazon.titan-text-express-v1
    name: Titan text Embedding on AWS
    provider: AWS
    config:
      aws_region: us-east-1

  - id: ollama
    name: Ollama Embeddings (local)
    provider: ollama
    config:
      base_url: ${OLLAMA_HOST}
      model: llama2

  - id: ollama-mxbai-embed-large
    name: Ollama Embeddings mxbai-embed-large (local)
    provider: ollama
    config:
      base_url: ${OLLAMA_HOST}
      model: mxbai-embed-large

  - id: ollama-nomic-embed-text
    name: Ollama Embeddings nomic-embed-text (local)
    provider: ollama
    config:
      base_url: ${OLLAMA_HOST}
      model: nomic-embed-text
=======

# --- API Key Repository Configuration. To use the api-key feature, set env var API_KEY_AUTH_ENABLED=true first ---
api_key_repository:
  type: ${API_KEY_REPOSITORY_TYPE}  # options: file (default), firestore, db, etc.
  pseudonymization_salt: ${API_KEY_PSEUDONYMIZATION_SALT}  # always required
  file:
    file_path: ${STORAGE_FILE_PATH}  # only required if type == file
  firestore:
    project_id: ${FIRESTORE_PROJECT_ID}  # only required if type == firestore
    collection_name: api_keys  # optional, defaults to "api_keys"
  db:
  # host: ...
  # port: ...
  # user: ...
  # password: ...
  # database: ...
