name: Haiven
run-name: Security Scan, Test and Build

env:
  REGISTRY: "ghcr.io"
  AWS_BEDROCK_REGION: "us-east-1"

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '20 17 * * *' # Sets Semgrep to scan every day at 17:20 UTC.

permissions:
  security-events: write

jobs:
  semgrep:
    name: semgrep-oss/scan
    runs-on: ubuntu-latest

    container:
      image: semgrep/semgrep

    if: (github.actor != 'dependabot[bot]')

    steps:
      - uses: actions/checkout@v4
      
      - name: Run full Semgrep scan
        run: semgrep scan --metrics=off --config "p/default" --sarif > semgrep.sarif

      - name: Check for high severity issues
        run: semgrep scan --metrics=off --config "p/default" --error --severity=ERROR
        continue-on-error: false

      - name: Upload SARIF file
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.sarif
          retention-days: 7

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  Test:
    needs: semgrep
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
    steps:
      - uses: 'actions/checkout@v4.1.1'
      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: pre-commit/action@v3.0.1
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Install App dependencies
        run: |
          cd app
          poetry install --no-interaction --no-root
      - name: Run Backend unit tests
        run: |
          cd app
          poetry run pytest -m 'not integration' tests/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BEDROCK_REGION: ${{ env.AWS_BEDROCK_REGION }}
      - name: Install CLI dependencies
        run: |
          cd cli && \
          poetry install --no-interaction --no-root
      - name: Run CLI tests
        run: |
          cd cli && \
          poetry run pytest tests/

  Build:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [Test]
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'write'
    outputs:
      image_digest: ${{ steps.kaniko-base.outputs.digest }}
    steps:
      - uses: 'actions/checkout@v4.1.1'

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      - name: Kaniko build base image
        id: 'kaniko-base'
        uses: int128/kaniko-action@v1
        with:
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache: true
          cache-repository: ${{ env.REGISTRY }}/${{ github.repository }}/cache
          push: true
          context: .

      # The fine-grained access tokens used by these requests need to have read & write access to "Contents"
      # (Explored GH Webhooks instead of these steps instead, but couldn't get the auth to work)
      - name: Notify TW demo deployment
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.DISPATCH_HAIVEN_DEPLOYMENT_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/tw-haiven/haiven-tw-demo-deployment/dispatches \
            -d '{"event_type":"haiven-base-new","client_payload":{}}' \
            --fail

      - name: Notify TW Prod deployment
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.DISPATCH_HAIVEN_DEPLOYMENT_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/tw-haiven/haiven-tw-prod-deployment/dispatches \
            -d '{"event_type":"haiven-base-new","client_payload":{}}' \
            --fail
